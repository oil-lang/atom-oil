name: 'Oil syntax highlighting'
scopeName: 'source.oil'
fileTypes: ['oil']
foldingStartMarker: '(?x)^\n\t\t\t#   Yes *+      Open  (         Blank |Comments                                        | (No Paren | String) | String                                                        | (Nested Parens             )  )*+\n\t\t\t(?> \\g<yesS>*+  \\[    (?<yesS>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noS>[^\\[\\]\'"/]) | (?<str> \'(\\\\\'|[^\'])*+\' | "(\\\\"|[^"])*+" | /(\\\\/|[^/])*+/) | (?<squar> \\[ \\g<yesS>*+ \\] )  )*+\n\t\t\t|   \\g<yesR>*+  \\(    (?<yesR>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noR>[^\\(\\)\'"/]) | \\g<str>                                                       | (?<round> \\( \\g<yesR>*+ \\) )  )*+\n\t\t\t|   \\g<yesC>*+  \\{    (?<yesC>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noC>[^\\{\\}\'"/]) | \\g<str>                                                       | (?<curly> \\{ \\g<yesC>*+ \\} )  )*+\n\t\t)$'
foldingStopMarker: '(?x)^\n\t\t\t#                     (         Blank |Comments                                        | (No Paren | String) | String                                                        | (Nested Parens             )  )*+  Close  Yes *+\n\t\t\t(?>                   (?<yesS>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noS>[^\\[\\]\'"/]) | (?<str> \'(\\\\\'|[^\'])*+\' | "(\\\\"|[^"])*+" | /(\\\\/|[^/])*+/) | (?<squar> \\[ \\g<yesS>*+ \\] )  )*+  \\]     \\g<yesS>*+\n\t\t\t|                     (?<yesR>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noR>[^\\(\\)\'"/]) | \\g<str>                                                       | (?<round> \\( \\g<yesR>*+ \\) )  )*+  \\)     \\g<yesR>*+\n\t\t\t|                     (?<yesC>  (?!.) |//.*+|/\\*((?!\\*/).)++(\\*/|$)|(^)((?!/\\*).)*(\\*/)| (?<noC>[^\\{\\}\'"/]) | \\g<str>                                                       | (?<curly> \\{ \\g<yesC>*+ \\} )  )*+  \\}     \\g<yesC>*+\n\t\t)$'
patterns: [
    {
        include: '#everything'
    }
]
repository:
    everything:
        patterns: [
            {
                include: '#core'
            }
            {
                include: '#class-definition'
            }
            {
                include: '#component-definition'
            }
            {
                include: '#view-definition'
            }
        ]
    core:
        patterns: [
            {
                include: '#comments'
            }
            {
                include: '#literal-number'
            }
            {
                include: '#literal-string'
            }
            {
                include: '#literal-keywords'
            }
        ]
    expression:
        patterns: [
            {
                include: '#literal-number'
            }
            {
                include: '#literal-string'
            }
        ]
    attr:
        patterns: [
            {
                include: '#attr-name'
            }
            {
                include: '#attr-class'
            }
            {
                include: '#attr-assignment'
            }
            {
                include: '#attr-brackets-expr'
            }
        ]
    'attr-class':
        match: '(?x)\\s*(class)(?=\\s|=|/?>|/\\*|//)'
        captures:
            '1':
                name: 'entity.other.attribute-name.oil'
    'attr-name':
        name: 'meta.tag.attribute-name.oil'
        match: '''
          (?x)
            \\s*
            ([\\[\\(])
            ([_$a-zA-Z][-$\\w]*)
            ([\\]\\)])
            (?=\\s|=|/?>|/\\*|//)
        '''
        captures:
            '1':
                name: 'punctuation.parameter.begin.oil'
            '2':
                name: 'entity.other.attribute-name.oil'
            '3':
                name: 'punctuation.parameter.end.oil'
    'attr-assignment':
        name: 'keyword.operator.assignment.oil'
        match: '=(?=\\s*(?:\'|"|{|/\\*|//|\\n))'
    'attr-brackets-expr':
        name: 'meta.embedded.expression.oil'
        begin: '{'
        end: '}'
        beginCaptures:
            '0':
                name: 'punctuation.section.embedded.begin.oil'
        endCaptures:
            '0':
                name: 'punctuation.section.embedded.end.oil'
        patterns: [
            {
                include: '#expression'
            }
        ]
    'block-tag':
        patterns: [
            {
                begin: '(?=(<)([a-zA-Z0-9_$][^\\s</>]*))'
                end: '(</)(\\2)(>)|(/>)'
                endCaptures:
                    '0':
                        name: 'meta.tag.block.end.oil'
                    '2':
                        name: 'entity.name.tag.oil'
                    '4':
                        name: 'meta.tag.block.begin.oil'
                name: 'meta.scope.tag.block.oil'
                patterns: [
                    {
                        begin: '\\G(<)([^\\s</>]+)'
                        beginCaptures:
                            '2':
                                name: 'entity.name.tag.oil'
                        end: '(>)|(?=/>)'
                        name: 'meta.tag.block.begin.oil'
                        patterns: [
                            {
                                include: '#attr'
                            }
                        ]
                    }
                    {
                        match: '</([^>]*)>'
                        name: 'invalid.illegal.tag.end.oil'
                    }
                    {
                        match: '<(/[a-zA-Z0-9_$.]*)?($|\\s)'
                        name: 'invalid.illegal.tag.end.oil'
                    }
                    {
                        begin: '(?<=>)(?!<$)(?!<\\s)(?!</)'
                        end: '(?=</)'
                        name: 'meta.scope.oil'
                        patterns: [
                            {
                                include: '#block-tag'
                            }
                        ]
                    }
                ]
            }
        ]
    comments:
        patterns: [
            {
                captures:
                    '1':
                        name: 'punctuation.definition.comment.oil'
                match: '(//).*$\\n?'
                name: 'comment.line.double-slash.oil'
            }
        ]
    'class-definition':
        begin: '(?x)(\\.)(?:(?i)([_$a-z][_$a-z0-9]*))?'
        beginCaptures:
            '1':
                name: 'entity.other.attribute-name.class.oil'
            '2':
                name: 'entity.other.attribute-name.class.$1.oil'
        end: '(?<=})'
        name: 'meta.$1'
        patterns: [
            {
                begin: '\\G'
                end: '(?<=\\))'
                patterns: [
                    {
                        begin: '\\G(?!\\()'
                        comment: 'class name'
                        end: '(?=\\()'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '(?i)[_$a-z][_$a-z0-9]*'
                                name: 'entity.other.attribute-name.class.$0.oil'
                            }
                        ]
                    }
                    {
                        begin: '\\('
                        beginCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.begin.function.oil'
                        contentName: 'meta.function.parameters'
                        end: '\\)'
                        endCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.end.function.oil'
                        name: 'meta.function.parameters'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '\\b(?i)[_$a-z][_$a-z0-9]*\\b'
                                name: 'variable.parameter.function.oil'
                            }
                            {
                                match: ','
                                name: 'punctuation.separator.parameters.function.oil'
                            }
                        ]
                    }
                ]
            }
            {
                include: '#comments'
            }
            {
                begin: '{'
                beginCaptures:
                    '0':
                        name: 'punctuation.section.property-list.begin.oil'
                name: 'meta.property-list.oil'
                end: '}'
                endCaptures:
                    '0':
                        name: 'punctuation.section.property-list.end.oil'
                patterns: [
                    {
                        include: '#class-attributes'
                    }
                ]
            }
        ]
    'class-attributes':
        patterns: [
            {
                include: '#comments'
            }
            {
                begin: '(?<![_a-z])(?=[_a-z])'
                end: '$|(?![_a-z])'
                name: 'meta.property-name.oil'
                patterns: [
                    {
                        # match: '(?<![\\w-])(zoom|z-index|y|x|wrap|word-wrap|word-spacing|word-break|word|width|widows|white-space-collapse|white-space|white|weight|volume|voice-volume|voice-stress|voice-rate|voice-pitch-range|voice-pitch|voice-family|voice-duration|voice-balance|voice|visibility|vertical-align|variant|user-select|up|unicode-bidi|unicode|trim|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform(-(style|origin))?|touch-action|top-width|top-style|top-right-radius|top-left-radius|top-color|top|timing-function|text-wrap|text-transform|text-shadow|text-replace|text-rendering|text-overflow|text-outline|text-justify|text-indent|text-height|text-emphasis|text-decoration|text-align-last|text-align|text|target-position|target-new|target-name|target|table-layout|tab-size|style-type|style-position|style-image|style|stroke|stroke-(width|opacity|miterlimit|linejoin|linecap|dashoffset|dasharray)|string-set|stretch|stress|stacking-strategy|stacking-shift|stacking-ruby|stacking|src|speed|speech-rate|speech|speak-punctuation|speak-numeral|speak-header|speak|span|spacing|space-collapse|space|sizing|size-adjust|size|shadow|respond-to|rule-width|rule-style|rule-color|rule|ruby-span|ruby-position|ruby-overhang|ruby-align|ruby|rows|rotation-point|rotation|role|right-width|right-style|right-color|right|richness|rest-before|rest-after|rest|resource|resolution|resize|reset|replace|repeat|rendering-intent|rate|radius|quotes|punctuation-trim|punctuation|property|profile|presentation-level|presentation|position|pointer-events|point|play-state|play-during|play-count|pitch-range|pitch|phonemes|pause-before|pause-after|pause|page-policy|page-break-inside|page-break-before|page-break-after|page|padding-top|padding-right|padding-left|padding-bottom|padding|pack|overhang|overflow-y|overflow-x|overflow-style|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|origin|orientation|orient|ordinal-group|order|opacity|offset|object-fit|numeral|new|nav-up|nav-right|nav-left|nav-index|nav-down|nav|name|move-to|model|mix-blend-mode|min-width|min-height|min|max-width|max-height|max|marquee-style|marquee-speed|marquee-play-count|marquee-direction|marquee|marks|mark-before|mark-after|mark|margin-top|margin-right|margin-left|margin-bottom|margin|mask-image|list-style-type|list-style-position|list-style-image|list-style|list|lines|line-stacking-strategy|line-stacking-shift|line-stacking-ruby|line-stacking|line-height|line|level|letter-spacing|length|left-width|left-style|left-color|left|label|justify-content|justify|iteration-count|inline-box-align|initial-value|initial-size|initial-before-align|initial-before-adjust|initial-after-align|initial-after-adjust|index|indent|increment|image-resolution|image-orientation|image|icon|hyphens|hyphenate-resource|hyphenate-lines|hyphenate-character|hyphenate-before|hyphenate-after|hyphenate|height|header|hanging-punctuation|grid-template-rows|grid-template-columns|grid-template-areas|grid-rows|grid-row-start|grid-row-gap|grid-row-end|grid-row|grid-gap|grid-columns|grid-column-start|grid-column-gap|grid-column-end|grid-column|grid-auto-rows|grid-auto-flow|grid-auto-columns|grid-area|grid|gap|font-weight|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-family|font|float-offset|float|flex-wrap|flex-shrink|flex-grow|flex-group|flex-flow|flex-direction|flex-basis|flex|fit-position|fit|fill|filter|family|empty-cells|emphasis|elevation|duration|drop-initial-value|drop-initial-size|drop-initial-before-align|drop-initial-before-adjust|drop-initial-after-align|drop-initial-after-adjust|drop|down|dominant-baseline|display-role|display-model|display|direction|delay|decoration-break|decoration|cursor|cue-before|cue-after|cue|crop|counter-reset|counter-increment|counter|count|content|columns|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|column-break-before|column-break-after|column|color-profile|color|collapse|clip|clear|character|caption-side|break-inside|break-before|break-after|break|box-sizing|box-shadow|box-pack|box-orient|box-ordinal-group|box-lines|box-flex-group|box-flex|box-direction|box-decoration-break|box-align|box|bottom-width|bottom-style|bottom-right-radius|bottom-left-radius|bottom-color|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-length|border-left-width|border-left-style|border-left-color|border-left|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|bookmark-target|bookmark-level|bookmark-label|bookmark|binding|bidi|before|baseline-shift|baseline|balance|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-break|background-attachment|background|azimuth|attachment|appearance|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-duration|animation-direction|animation-delay|animation-fill-mode|animation|alignment-baseline|alignment-adjust|alignment|align-self|align-last|align-items|align-content|align|after|adjust|will-change)(?![\\w-])'
                        match: '(?<![\\w-])(y|x|width|visibility|transition_timing_function|transition_property|transition_duration|transition_delay|transition|transform(_(style|origin))?|top|timing_function|rotation|right|padding_top|padding_right|padding_left|padding_bottom|padding|overflow_y|overflow_x|overflow_style|overflow|origin|opacity|min_width|min_height|min|max_width|max_height|max|margin_top|margin_right|margin_left|margin_bottom|margin|line_height|left|justify_content|height|font_weight|font_variant|font_style|font_stretch|font_size|font_family|font|flex_wrap|flex_shrink|flex_grow|flex_group|flex_flow|flex_direction|flex_basis|flex|fit|duration|cursor|crop|color|collapse|clip|bottom|border_width|border_top_width|border_top_style|border_style|border_spacing|border_right_style|border_right|border_radius|border_length|border_left_width|border_left_style|border_left_color|border_left|border_image|border_color|border_collapse|border_bottom_width|border_bottom_style|border_bottom_right_radius|border_bottom_left_radius|border_bottom_color|border_bottom|border|background_size|background_repeat|background_position|background_origin|background_image|background_color|background_clip|animation_timing_function|animation_play_state|animation_name|animation_duration|animation_direction|animation_delay|animation|alignment|align_self|align_last|align_items|align_content)(?![\\w-])'
                        name: 'support.type.property-name.oil'
                    }
                ]
            }
        ]
    'component-definition':
        begin: '\\b(component)(?:\\s+((?i)[_$a-z][_$a-z0-9]*))?'
        beginCaptures:
            '1':
                name: 'keyword.control.def.oil'
            '2':
                name: 'entity.name.function.$1.oil'
        end: '(?<=})'
        name: 'meta.$1'
        patterns: [
            {
                begin: '\\G'
                end: '(?<=\\])'
                patterns: [
                    {
                        begin: '\\G(?!\\[)'
                        comment: 'component name'
                        end: '(?=\\[)'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '(?i)[_$a-z][_$a-z0-9]*'
                                name: 'entity.name.function.$0.oil'
                            }
                        ]
                    }
                    {
                        begin: '\\['
                        beginCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.begin.function.oil'
                        contentName: 'meta.function.parameters'
                        end: '\\]'
                        endCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.end.function.oil'
                        name: 'meta.function.parameters'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '\\b(?i)[_$a-z][_$a-z0-9]*\\b'
                                name: 'variable.parameter.function.oil'
                            }
                            {
                                match: ','
                                name: 'punctuation.separator.parameters.function.oil'
                            }
                        ]
                    }
                ]
            }
            {
                include: '#comments'
            }
            {
                begin: '(=)(?:\\s*)({)'
                beginCaptures:
                    '1':
                        name: 'punctuation.equal.oil'
                    '2':
                        name: 'punctuation.definition.function.begin.oil'
                contentName: 'meta.function.body'
                end: '}'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.function.end.oil'
                patterns: [
                    {
                        include: '#core'
                    }
                    {
                        include: '#block-tag'
                    }
                ]
            }
            {
                begin: '(=)(?:\\s*)'
                beginCaptures:
                    '1':
                        name: 'punctuation.definition.function.begin.oil'
                contentName: 'meta.function.body'
                end: ';'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.function.end.oil'
                patterns: [
                    {
                        include: '#core'
                    }
                    {
                        include: '#block-tag'
                    }
                ]
            }
        ]
    'view-definition':
        begin: '\\b(view)(?:\\s+((?i)[_$a-z][_$a-z0-9]*))?'
        beginCaptures:
            '1':
                name: 'keyword.control.def.oil'
            '2':
                name: 'entity.name.function.$1.oil'
        end: '(?<=})'
        name: 'meta.$1'
        patterns: [
            {
                begin: '\\G'
                end: '(?<=\\))'
                patterns: [
                    {
                        begin: '\\G(?!\\()'
                        comment: 'view name'
                        end: '(?=\\()'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '(?i)[_$a-z][_$a-z0-9]*'
                                name: 'entity.name.function.$0.oil'
                            }
                        ]
                    }
                    {
                        begin: '\\('
                        beginCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.begin.function.oil'
                        contentName: 'meta.function.parameters'
                        end: '\\)'
                        endCaptures:
                            '0':
                                name: 'punctuation.definition.parameters.end.function.oil'
                        name: 'meta.function.parameters'
                        patterns: [
                            {
                                include: '#comments'
                            }
                            {
                                match: '\\b(?i)[_$a-z][_$a-z0-9]*\\b'
                                name: 'variable.parameter.function.oil'
                            }
                            {
                                match: ','
                                name: 'punctuation.separator.parameters.function.oil'
                            }
                        ]
                    }
                ]
            }
            {
                include: '#comments'
            }
            {
                begin: '(=)(?:\\s*)({)'
                beginCaptures:
                    '1':
                        name: 'punctuation.equal.oil'
                    '2':
                        name: 'punctuation.definition.function.begin.oil'
                contentName: 'meta.function.body'
                end: '}'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.function.end.oil'
                patterns: [
                    {
                        include: '#core'
                    }
                    {
                        include: '#block-tag'
                    }
                ]
            }
            {
                begin: '(=)(?:\\s*)'
                beginCaptures:
                    '1':
                        name: 'punctuation.definition.function.begin.oil'
                contentName: 'meta.function.body'
                end: ';'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.function.end.oil'
                patterns: [
                    {
                        include: '#core'
                    }
                    {
                        include: '#block-tag'
                    }
                ]
            }
        ]
    'literal-number':
        patterns: [
            {
                match: '(?i)(?:\\B[-+]|\\b)0x[0-9a-f]*\\.(\\B|\\b[0-9]+)'
                name: 'invalid.illegal.numeric.hex.oil'
            }
            {
                match: '(?:\\B[-+]|\\b)0[0-9]+\\.(\\B|\\b[0-9]+)'
                name: 'invalid.illegal.numeric.octal.oil'
            }
            {
                match: '(?xi)(?:\\B[-+])?(?:\n\t\t\t\t\t \\b0x[0-9a-f]* # HEX\n\t\t\t\t\t|(          \\B\\.[0-9]+   # EG:    .999\n\t\t\t\t\t  | \\b[0-9]+ (\\.[0-9]*)? # EG: 999.999 or 999. or 999 \n\t\t\t\t\t )(e[-+]?[0-9]+)?        # EG: e+123 or E-123\n\t\t\t\t\t)'
                name: 'constant.numeric.oil'
            }
            {
                match: '(?:\\B[-+]|\\b)(Infinity)\\b'
                name: 'constant.language.oil'
            }
        ]
    'literal-string':
        patterns: [
            {
                begin: '\''
                beginCaptures:
                    '0':
                        name: 'punctuation.definition.string.begin.oil'
                end: '(?i)\'|(?=</\\s*script\\s*>\\s*\\n)|(?<=[^\\\\]\\n)'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.string.end.oil'
                name: 'string.quoted.single.oil'
                patterns: [
                    {
                        include: '#string-single-innards'
                    }
                ]
            }
            {
                begin: '"'
                beginCaptures:
                    '0':
                        name: 'punctuation.definition.string.begin.oil'
                end: '(?i)"|(?=</\\s*script\\s*>\\s*\\n)|(?<=[^\\\\]\\n)'
                endCaptures:
                    '0':
                        name: 'punctuation.definition.string.end.oil'
                name: 'string.quoted.double.oil'
                patterns: [
                    {
                        include: '#string-double-innards'
                    }
                ]
            }
        ]
    'literal-keywords':
        patterns: [
            # {
            #     captures:
            #         '1':
            #             name: 'keyword.control.oil'
            #         '2':
            #             name: 'entity.name.type.class.oil'
            #     match: '(component)\\s+(\\w+(?:\\.\\w*)?)'
            #     name: 'meta.class.instance.constructor'
            # }
            {
                match: '\\b(let|obs)\\b'
                name: 'storage.modifier.oil'
            }
            {
                match: '\\b(const|export)\\b'
                name: 'storage.modifier.oil'
            }
            {
                match: '\\b(@if|import|from)\\b'
                name: 'keyword.control.oil'
            }
            {
                match: '\\btrue\\b'
                name: 'constant.language.boolean.true.oil'
            }
            {
                match: '\\bfalse\\b'
                name: 'constant.language.boolean.false.oil'
            }
            {

            }
        ]
    'string-double-innards':
        patterns: [
            {
                match: '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
                name: 'constant.character.escape.oil'
            }
            {
                match: '\\\\\\n'
                name: 'constant.character.escape.newline.oil'
            }
            {
                match: '\\n'
                name: 'invalid.illegal.newline.oil'
            }
            {
                match: '(?i)</\\s*script\\s*>'
                name: 'invalid.deprecated.inconsistent.oil'
            }
        ]
    'string-single-innards':
        patterns: [
            {
                match: '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
                name: 'constant.character.escape.oil'
            }
            {
                match: '\\\\\\n'
                name: 'constant.character.escape.newline.oil'
            }
            {
                match: '\\n'
                name: 'invalid.illegal.newline.oil'
            }
            {
                match: '(?i)</\\s*script\\s*>'
                name: 'invalid.deprecated.inconsistent.oil'
            }
        ]
